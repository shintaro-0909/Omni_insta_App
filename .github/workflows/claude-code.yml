name: Claude Code Integration

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, edited]
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created, edited]

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read
  checks: read

jobs:
  claude-code:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '@claude') || contains(github.event.issue.body, '@claude') || contains(github.event.pull_request.body, '@claude') || contains(github.event.review.body, '@claude')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          functions/package-lock.json

    - name: Install Claude Code CLI
      run: |
        npm install -g @anthropic-ai/claude-code
        echo "Claude Code CLI installed successfully"

    - name: Setup project dependencies
      run: |
        # Install frontend dependencies
        cd frontend && npm ci
        
        # Install backend dependencies  
        cd ../functions && npm ci
        
        echo "Project dependencies installed"

    - name: Configure Claude Code environment
      run: |
        # Set up secure environment for Claude Code
        export ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}"
        export CLAUDE_SKIP_PERMISSIONS=true
        
        # Verify environment
        claude --version
        echo "Claude Code environment configured"

    - name: Extract Claude request
      id: extract-request
      run: |
        # Extract the @claude mention and request from the event
        if [ "${{ github.event_name }}" = "issues" ]; then
          BODY="${{ github.event.issue.body }}"
        elif [ "${{ github.event_name }}" = "issue_comment" ]; then
          BODY="${{ github.event.comment.body }}"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          BODY="${{ github.event.pull_request.body }}"
        elif [ "${{ github.event_name }}" = "pull_request_review" ]; then
          BODY="${{ github.event.review.body }}"
        elif [ "${{ github.event_name }}" = "pull_request_review_comment" ]; then
          BODY="${{ github.event.comment.body }}"
        fi
        
        # Extract text after @claude
        REQUEST=$(echo "$BODY" | sed -n 's/.*@claude\s*\(.*\)/\1/p' | head -1)
        echo "request=$REQUEST" >> $GITHUB_OUTPUT
        echo "Extracted request: $REQUEST"

    - name: Execute Claude Code request
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CLAUDE_SKIP_PERMISSIONS: true
      run: |
        REQUEST="${{ steps.extract-request.outputs.request }}"
        
        if [ -z "$REQUEST" ]; then
          echo "No valid Claude request found"
          exit 0
        fi
        
        echo "Executing Claude Code request: $REQUEST"
        
        # Execute Claude Code with the request
        claude --dangerously-skip-permissions --prompt "$REQUEST" || {
          echo "Claude Code execution failed"
          exit 1
        }

    - name: Check for changes and create commit
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "Claude Code Bot"
        
        # Check if there are any changes
        if [ -n "$(git status --porcelain)" ]; then
          echo "Changes detected, creating commit..."
          
          # Add all changes
          git add .
          
          # Create commit with descriptive message
          git commit -m "feat: implement changes requested via @claude

ü§ñ Generated with Claude Code
          
Request: ${{ steps.extract-request.outputs.request }}

Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # Push changes
          git push
          
          echo "Changes committed and pushed successfully"
        else
          echo "No changes to commit"
        fi

    - name: Validate implementation
      run: |
        # Run type checking
        echo "üîç Running TypeScript type check..."
        cd frontend && npm run type-check
        cd ../functions && npm run build
        
        # Run linting
        echo "üîç Running ESLint..."
        cd ../frontend && npm run lint:check
        cd ../functions && npm run lint
        
        echo "‚úÖ All validation checks passed"

    - name: Update progress tracking
      run: |
        echo "üìã Checking progress tracking updates..."
        
        # Check if progress file was updated
        if git diff --name-only HEAD~1 | grep -q "docs/dev_tasks_userstories.md"; then
          echo "‚úÖ Progress tracking file was updated"
        else
          echo "‚ö†Ô∏è Reminder: Update progress tracking file if tasks were completed"
        fi

    - name: Comment on issue/PR
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          const comment = `ü§ñ **Claude Code Execution Complete**
          
          ‚úÖ Request processed successfully
          üìù Changes committed (if any)
          üîç Validation checks passed
          
          **Reminder**: If tasks were completed, please update the progress tracking file (\`docs/dev_tasks_userstories.md\`) with \`[x]\` marks.
          
          ---
          *Generated with [Claude Code](https://claude.ai/code)*`;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: comment
          });