name: Deploy to Firebase

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./functions
      run: npm ci
      
    - name: Build frontend for staging
      working-directory: ./frontend
      run: npm run build:staging
      
    - name: Build backend
      working-directory: ./functions
      run: npm run build
      
    - name: Setup Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy to Firebase Staging
      run: |
        echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}" > ./service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS="./service-account.json"
        firebase use --token "${{ secrets.FIREBASE_TOKEN }}" omniy-staging
        firebase deploy --only hosting:staging,functions --token "${{ secrets.FIREBASE_TOKEN }}"
        rm ./service-account.json

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: [run-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./functions
      run: npm ci
      
    - name: Build frontend for production
      working-directory: ./frontend
      run: npm run build:production
      
    - name: Build backend
      working-directory: ./functions
      run: npm run build
      
    - name: Setup Firebase CLI
      run: npm install -g firebase-tools
      
    - name: Deploy to Firebase Production
      run: |
        echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}" > ./service-account.json
        export GOOGLE_APPLICATION_CREDENTIALS="./service-account.json"
        firebase use --token "${{ secrets.FIREBASE_TOKEN }}" omniy-production
        firebase deploy --only hosting:production,functions,firestore:rules --token "${{ secrets.FIREBASE_TOKEN }}"
        rm ./service-account.json
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'üéâ Production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()
      
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: '‚ùå Production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run type checking
      working-directory: ./frontend
      run: npm run type-check
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Build application
      working-directory: ./frontend
      run: npm run build
      
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:unit
      
    - name: Run E2E tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: ./frontend
        start: npm run preview
        wait-on: 'http://localhost:4173'
        browser: chrome