name: 🔥 CI - Firestore Emulator Tests

on:
  push:
    branches: [ main, develop, feature/schedule-grid ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-tests:
    name: 🧪 Frontend Tests (Emulator)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          functions/package-lock.json

    - name: ☕ Setup Java 11 (for Firebase Emulator)
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: 🔧 Install Firebase CLI
      run: npm install -g firebase-tools

    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 📦 Install functions dependencies
      working-directory: ./functions
      run: npm ci

    - name: 🔍 Lint Frontend
      working-directory: ./frontend
      run: npm run lint:check

    - name: 🔍 TypeScript Check
      working-directory: ./frontend
      run: npm run type-check

    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: 🔥 Start Firebase Emulators
      run: |
        firebase emulators:start --only firestore,auth,functions &
        sleep 30
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/functions/.runtimeconfig.json

    - name: 🧪 Run Frontend Unit Tests (Emulator)
      working-directory: ./frontend
      run: npm run test:emu
      env:
        VITE_FIRESTORE_EMULATE: true
        VITE_ENABLE_FIREBASE_EMULATOR: true

    - name: 📊 Generate Test Coverage
      working-directory: ./frontend
      run: npm run test:coverage
      env:
        VITE_FIRESTORE_EMULATE: true

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-${{ matrix.node-version }}

  functions-tests:
    name: 🔧 Functions Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json

    - name: ☕ Setup Java 11 (for Firebase Emulator)
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: 🔧 Install Firebase CLI
      run: npm install -g firebase-tools

    - name: 📦 Install functions dependencies
      working-directory: ./functions
      run: npm ci

    - name: 🏗️ Build Functions
      working-directory: ./functions
      run: npm run build

    - name: 🔍 Lint Functions
      working-directory: ./functions
      run: npm run lint

    - name: 🧪 Run Functions Tests
      working-directory: ./functions
      run: npm run test

    - name: 📊 Generate Functions Coverage
      working-directory: ./functions
      run: npm run test:coverage

    - name: 📈 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./functions/coverage
        flags: functions
        name: functions

  e2e-tests:
    name: 🎭 E2E Tests (Cypress + Emulator)
    runs-on: ubuntu-latest

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: ☕ Setup Java 11 (for Firebase Emulator)
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: 🔧 Install Firebase CLI
      run: npm install -g firebase-tools

    - name: 📦 Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 📦 Install functions dependencies
      working-directory: ./functions
      run: npm ci

    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build

    - name: 🔥 Start Firebase Emulators
      run: |
        firebase emulators:start --only firestore,auth,hosting,functions &
        sleep 45
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/functions/.runtimeconfig.json

    - name: 🎭 Run Cypress E2E Tests
      working-directory: ./frontend
      run: npm run test:e2e:headless
      env:
        CYPRESS_BASE_URL: http://localhost:5000
        VITE_FIRESTORE_EMULATE: true
        VITE_ENABLE_FIREBASE_EMULATOR: true

    - name: 📦 Upload Cypress Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots-${{ matrix.node-version }}
        path: frontend/cypress/screenshots

    - name: 📦 Upload Cypress Videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-videos-${{ matrix.node-version }}
        path: frontend/cypress/videos

  integration-tests:
    name: 🔗 Integration Tests (ScheduleGrid)
    runs-on: ubuntu-latest
    needs: [frontend-tests, functions-tests]

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: ☕ Setup Java 11
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: 🔧 Install Firebase CLI
      run: npm install -g firebase-tools

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🔥 Start Firebase Emulators
      run: |
        firebase emulators:start --only firestore,auth &
        sleep 30

    - name: 🧪 Run ScheduleGrid Integration Tests
      working-directory: ./frontend
      run: |
        npm run test:emu -- src/components/__tests__/ScheduleGridCell.test.ts
        npm run test:emu -- src/views/__tests__/ScheduleGridView.test.ts
      env:
        VITE_FIRESTORE_EMULATE: true
        VITE_ENABLE_FIREBASE_EMULATOR: true

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: 🔍 Frontend Security Audit
      working-directory: ./frontend
      run: npm audit --audit-level=high

    - name: 🔍 Functions Security Audit
      working-directory: ./functions
      run: npm audit --audit-level=high

  performance-check:
    name: ⚡ Performance Check
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: 📁 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: 🏗️ Build for Performance Analysis
      working-directory: ./frontend
      run: npm run build:analyze

    - name: ⚡ Bundle Size Check
      working-directory: ./frontend
      run: |
        echo "📦 Bundle Analysis:"
        ls -la dist/assets/
        echo "🎯 Main bundle should be < 500KB gzipped"

  notify-success:
    name: 🎉 Success Notification
    runs-on: ubuntu-latest
    needs: [frontend-tests, functions-tests, e2e-tests, integration-tests, security-audit, performance-check]
    if: success()

    steps:
    - name: 🎉 All Tests Passed
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Frontend Tests"
        echo "✅ Functions Tests"
        echo "✅ E2E Tests"
        echo "✅ Integration Tests"
        echo "✅ Security Audit"
        echo "✅ Performance Check"
        echo "🚀 Ready for deployment!"

  notify-failure:
    name: 🚨 Failure Notification
    runs-on: ubuntu-latest
    needs: [frontend-tests, functions-tests, e2e-tests, integration-tests, security-audit, performance-check]
    if: failure()

    steps:
    - name: 🚨 Tests Failed
      run: |
        echo "🚨 CI checks failed. Please check the logs above."
        echo "📋 Failed jobs will be indicated in the workflow summary."
        exit 1