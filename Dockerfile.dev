# === Omniy Development Container ===
# 1人運営向け効率的な開発環境

# Base Node.js image with latest LTS
FROM node:18-alpine AS base

# Install essential system dependencies
RUN apk add --no-cache \
    git \
    curl \
    bash \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Install Firebase CLI and development tools globally
RUN npm install -g \
    firebase-tools@latest \
    concurrently@^8.2.2 \
    nodemon@^3.0.2 \
    && npm cache clean --force

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S omniy -u 1001 -G nodejs

# Frontend Development Stage
FROM base AS frontend-dev

WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./

# Install dependencies with cache optimization
RUN npm ci --prefer-offline --no-audit

# Copy frontend source code
COPY frontend/ .

# Set ownership
RUN chown -R omniy:nodejs /app/frontend
USER omniy

# Expose frontend port
EXPOSE 5173

# Health check for frontend
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5173/ || exit 1

# Start frontend development server
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Backend Development Stage
FROM base AS backend-dev

WORKDIR /app/functions

# Copy package files
COPY functions/package*.json ./

# Install dependencies
RUN npm ci --prefer-offline --no-audit

# Copy backend source code
COPY functions/ .

# Set ownership
RUN chown -R omniy:nodejs /app/functions
USER omniy

# Expose backend ports
EXPOSE 5001 9099 8080

# Health check for backend
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5001/ || exit 1

# Start backend development server
CMD ["npm", "run", "serve"]

# Full Development Environment
FROM base AS dev-full

# Copy entire project
COPY . /app/

# Install dependencies for both frontend and backend
WORKDIR /app/frontend
RUN npm ci --prefer-offline --no-audit

WORKDIR /app/functions
RUN npm ci --prefer-offline --no-audit

# Set ownership
RUN chown -R omniy:nodejs /app
USER omniy

WORKDIR /app

# Expose all development ports
EXPOSE 5173 5001 4000 9099 8080 9199

# Create development scripts
COPY --chown=omniy:nodejs tools/scripts/dev-*.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/dev-*.sh

# Health check for full environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=5 \
    CMD curl -f http://localhost:4000/ && curl -f http://localhost:5173/ || exit 1

# Start development environment
CMD ["/usr/local/bin/dev-start.sh"]

# Testing Environment
FROM dev-full AS test

USER omniy

# Set test environment
ENV NODE_ENV=test
ENV CI=true

# Run comprehensive tests
CMD ["/usr/local/bin/dev-test.sh"]

# Production Build Stage (for development validation)
FROM base AS build

WORKDIR /app

# Copy source code
COPY . .

# Install dependencies
WORKDIR /app/frontend
RUN npm ci --prefer-offline --no-audit --production=false

WORKDIR /app/functions
RUN npm ci --prefer-offline --no-audit --production=false

# Build both frontend and backend
WORKDIR /app/frontend
RUN npm run build

WORKDIR /app/functions
RUN npm run build

# Production Development Server (nginx + functions)
FROM nginx:alpine AS prod-dev

# Install Node.js for functions
RUN apk add --no-cache nodejs npm

# Copy built frontend
COPY --from=build /app/frontend/dist /usr/share/nginx/html

# Copy built functions
COPY --from=build /app/functions/lib /app/functions/lib
COPY --from=build /app/functions/package*.json /app/functions/

# Install production dependencies only
WORKDIR /app/functions
RUN npm ci --prefer-offline --no-audit --production

# Copy nginx configuration
COPY tools/docker/nginx.conf /etc/nginx/nginx.conf

# Expose ports
EXPOSE 80 5001

# Start nginx and functions
CMD ["sh", "-c", "nginx -g 'daemon off;' & cd /app/functions && npm start"]