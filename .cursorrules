# Cursor AI Development Rules for Omniy Project

## 重要なルール（必須）

### 1. 進捗管理表の更新
- **完了した項目については、必ず `docs/dev_tasks_userstories.md` でチェックマーク（`[x]`）をつける**
- タスク完了時は対応する進捗管理表の項目を `[ ]` から `[x]` に変更する
- サブタスクも含めて全て更新する
- 完了したセクションには `✅` マークを追加する

### 2. TODO管理
- TodoRead/TodoWrite ツールを積極的に使用して進捗を追跡する
- 大きなタスクは複数の小さなタスクに分割する
- 完了したタスクは必ず `completed` ステータスに更新する

### 3. Git/GitHub ワークフロー ⚠️ CRITICAL
**タスク完了時は必ずGitコミット・GitHubプッシュを実行する**

#### 必須手順:
1. 進捗管理表更新（`[x]` マーク）
2. `git add .` でステージング
3. 適切なコミットメッセージでコミット
4. GitHubへプッシュ
5. プルリクエスト作成

### 4. ファイル命名・構造
- TypeScript: PascalCase（コンポーネント）、camelCase（関数・変数）
- Vue.js: PascalCase.vue（コンポーネントファイル）
- 既存のディレクトリ構造とファイル命名規則に従う

### 4. コーディング規約
- TypeScript strict mode を使用
- ESLint/Prettier の設定に従う
- エラーハンドリングを必ず実装
- コンソールログで適切なデバッグ情報を出力

### 5. Firebase 開発
- Cloud Functions は TypeScript で記述
- Firestore セキュリティルールを考慮
- 認証・認可チェックを忘れずに実装
- コンパイルエラーがないことを `npm run build` で確認

### 6. Vue.js 開発
- Composition API を使用
- Pinia for state management
- Vuetify UI コンポーネントを活用
- props/emit の型定義を明確に

### 7. プロジェクト固有
- MoSCoW prioritization (Must/Should/Could/Won't) に従う
- Instagram Graph API v18.0 を使用
- Stripe API v2023-10-16 を使用
- プロキシ機能は HTTP/HTTPS/SOCKS5 に対応

## 開発フロー

1. TodoRead でタスク状況を確認
2. 該当するタスクを `in_progress` に更新
3. 実装・テスト
4. コンパイル・リントチェック
5. 完了時は進捗管理表を更新（`[x]` マーク）
6. TodoWrite でタスクを `completed` に更新

## 技術スタック

### Frontend
- Vue.js 3 + TypeScript + Vite
- Vuetify 3 (UI framework)
- Pinia (state management)
- Firebase SDK v9

### Backend
- Node.js + TypeScript
- Firebase Cloud Functions (2nd gen)
- Cloud Firestore
- Firebase Auth
- Cloud Scheduler

### External APIs
- Instagram Graph API v18.0
- Stripe API v2023-10-16

### Development Tools
- ESLint + Prettier
- Jest (backend testing)
- Vitest (frontend testing)

## ファイル構造理解

```
frontend/
├── src/
│   ├── components/     # 再利用可能コンポーネント
│   ├── views/         # ページコンポーネント
│   ├── stores/        # Pinia stores
│   ├── services/      # API service layers
│   └── utils/         # ユーティリティ関数

functions/
├── src/
│   ├── api/          # HTTP endpoints
│   ├── schedulers/   # バックグラウンドジョブ
│   ├── utils/        # 共通ユーティリティ
│   └── index.ts      # エントリーポイント
```

## 共通パターン

### Error Handling
```typescript
try {
  // implementation
  console.log('✅ 処理成功:', result)
} catch (error: any) {
  console.error('❌ 処理エラー:', error)
  throw new functions.https.HttpsError('internal', error.message)
}
```

### Firestore Operations
```typescript
const db = admin.firestore()
const docRef = db.collection('collection').doc('document')
const doc = await docRef.get()
if (!doc.exists) {
  throw new Error('Document not found')
}
```

### Vue Component Pattern
```vue
<script setup lang="ts">
import { ref, computed } from 'vue'
// 型定義、props、emit、reactive data、computed、methods
</script>
```

これらのルールに従って一貫性のある高品質なコードを作成してください。