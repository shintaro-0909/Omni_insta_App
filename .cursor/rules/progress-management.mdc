---
description: 
globs: 
alwaysApply: false
---
# 進捗管理ルール（必須実行）

## 🎯 タスク完了時の必須手順（⚠️ CRITICAL）

### 1. 進捗表更新（必須）
**完了した項目については、必ず `docs/dev_tasks_userstories.md` でチェックマーク（`[x]`）をつける**

- **ファイル**: `docs/dev_tasks_userstories.md`
- **完了項目**: `[ ]` → `[x]` に変更
- **完了セクション**: タイトルに `✅` マークを追加
- **詳細記載**: 実装した具体的な内容を記載
- **進捗率更新**: Sprint進捗率を再計算

### 2. 部分完了時の詳細記録
```markdown
### T##: タスク名 🔄
- [x] 完了した項目
  - [x] 具体的な実装内容
- [ ] 未完了項目
  - [ ] 次回実装予定の内容
  - [ ] 残り作業の詳細
```

### 3. 実行タイミング
- ✅ 各タスク完了時
- ✅ 作業セッション終了時  
- ✅ ブランチマージ前
- ✅ 重要な機能実装完了時

## 📋 進捗表テンプレート

### 完了時
```markdown
### T##: タスク名 ✅
- [x] 主要機能
  - [x] 具体的実装内容
  - [x] ファイル名・関数名
  - [x] テスト・検証結果
```

### 部分完了時
```markdown
### T##: タスク名 🔄
- [x] 完了済み機能
  - [x] 実装済み内容
- [ ] 残り作業
  - [ ] 次回実装予定
  - [ ] 注意事項・課題
```

## 🚨 チェックリスト

タスク完了前に必ず確認：
- [ ] 進捗表が最新状態か？
- [ ] 実装内容と進捗表の整合性は？
- [ ] 次回作業者が理解できる詳細度か？
- [ ] 進捗率は正確に計算されているか？

## 💡 ベストプラクティス

1. **具体性**: 「実装完了」ではなく「○○関数実装、○○画面作成」
2. **ファイル名記載**: 実装したファイル名を明記
3. **課題記録**: 未解決の課題や注意点を記載
4. **次回指針**: 次回作業の開始点を明確化

## 📝 実際の完了例（T14: プロキシベースフェッチ機能実装）

```markdown
### T14: CF: Proxy経由Fetch ✅
- [x] NodeFetch + Proxy実装
  - [x] functions/src/utils/proxyFetch.ts作成
  - [x] proxyFetch, createProxyAgent, getAccountProxyConfig関数実装
  - [x] HTTP/HTTPS/SOCKS5プロトコル対応
- [x] IP確認テスト
  - [x] testProxyConnection関数でHTTPBin API使用
  - [x] レスポンス時間測定機能実装
- [x] プロキシローテーション
  - [x] ProxyRotator クラス実装
  - [x] ProxyUsageTracker で使用量追跡
- [x] Instagram API統合
  - [x] functions/src/api/instagram.ts更新
  - [x] functions/src/schedulers/postExecutor.ts更新
  - [x] functions/src/api/proxies.ts新規作成
- [x] フロントエンド連携
  - [x] frontend/src/stores/proxies.ts更新
  - [x] Firebase Functions連携実装
```

**この進捗管理ルールは、開発効率と品質向上のため必須実行とする。**
**完了した項目については、必ず `[x]` マークを付けることを忘れずに！**
