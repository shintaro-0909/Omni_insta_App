---
description: 
globs: 
alwaysApply: false
---
# Development Workflow Rules

## 🎯 開発思考プロセス

### タスク再開時の判断基準
1. **進捗確認**: `docs/dev_tasks_userstories.md`で現在位置を確認
   - **⚠️ CRITICAL**: 完了した項目については必ず `[x]` マークを付ける
2. **品質チェック**: TypeScriptエラー、ESLintエラーの有無
3. **Git状態**: 未コミットの変更、ブランチ状況
4. **次のマイルストーン**: Sprint目標との整合性

### ブランチ戦略の自動判断

#### ブランチ作成タイミング
- **新機能開始時**: `feature/T{番号}-{機能名}`
- **バグ修正時**: `fix/issue-{番号}-{概要}`
- **ドキュメント更新**: `docs/{内容}`
- **リファクタリング**: `refactor/{対象}`

#### ブランチ命名規則
```bash
# 機能開発
feature/T11-stripe-integration
feature/T12-plan-limits

# バグ修正
fix/issue-123-auth-error
fix/hotfix-payment-failure

# ドキュメント
docs/api-documentation
docs/deployment-guide

# リファクタリング
refactor/auth-store
refactor/api-error-handling
```

### コミット戦略

#### コミットタイミング（自動判断）
1. **機能単位完了時** - 1つの機能が動作する状態
2. **重要な設定変更時** - 設定ファイル、依存関係更新
3. **ドキュメント更新時** - READMEやガイド更新
4. **1日の作業終了時** - WIP（Work In Progress）でも保存

#### コミットメッセージ規約
```
<type>(<scope>): <subject>

<body>

<footer>
```

**Type一覧:**
- `feat`: 新機能
- `fix`: バグ修正
- `docs`: ドキュメント
- `style`: コードスタイル
- `refactor`: リファクタリング
- `test`: テスト追加・修正
- `chore`: その他（依存関係、設定等）
- `perf`: パフォーマンス改善
- `ci`: CI/CD関連

**例:**
```
feat(auth): カスタムクレーム管理機能を追加

- setCustomClaims関数実装
- updateUserClaims関数実装
- プラン情報の自動同期
- 管理者権限チェック強化

Closes #123
```

### PR作成の自動判断

#### PR作成タイミング
1. **機能完了時** - テスト通過、ドキュメント更新済み
2. **レビューが必要な変更** - アーキテクチャ変更、セキュリティ関連
3. **Sprint終了前** - 進捗共有、フィードバック収集
4. **緊急修正時** - ホットフィックス

#### PRテンプレート構造
```markdown
## 📋 変更概要
- 何を変更したか
- なぜ変更したか

## 🧪 テスト
- [ ] 単体テスト通過
- [ ] 統合テスト通過
- [ ] 手動テスト完了

## 📸 スクリーンショット
（UI変更がある場合）

## 🔗 関連Issue
Closes #123

## ✅ チェックリスト
- [ ] ESLint/TypeScriptエラーなし
- [ ] ドキュメント更新済み
- [ ] セキュリティチェック完了
```

### Issue管理戦略

#### Issue作成タイミング
1. **新機能要求時** - ユーザーストーリー単位
2. **バグ発見時** - 再現手順明記
3. **技術的改善提案時** - パフォーマンス、セキュリティ
4. **ドキュメント不備時** - 情報不足、古い情報

#### Issueラベル体系
```
Priority:
- priority/critical (P0)
- priority/high (P1)
- priority/medium (P2)
- priority/low (P3)

Type:
- type/feature
- type/bug
- type/enhancement
- type/documentation
- type/security

Status:
- status/todo
- status/in-progress
- status/review
- status/done

Sprint:
- sprint/1
- sprint/2
- sprint/3
```

## 🔄 継続的改善プロセス

### 週次レビュー（毎週金曜日）
1. **進捗確認**: 完了タスク、残りタスク
2. **品質メトリクス**: テストカバレッジ、パフォーマンス
3. **技術的負債**: リファクタリング候補
4. **次週計画**: 優先順位調整

### Sprint終了時
1. **振り返り**: 良かった点、改善点
2. **メトリクス分析**: 開発速度、品質指標
3. **次Sprintプランニング**: 目標設定、タスク分解

## 🚨 緊急時対応

### ホットフィックス手順
1. `main`から`hotfix/`ブランチ作成
2. 最小限の修正実装
3. テスト実行
4. `main`と`develop`両方にマージ
5. 緊急デプロイ実行

### ロールバック手順
1. 問題のあるデプロイを特定
2. 前回の安定版に戻す
3. 問題の根本原因調査
4. 修正版の準備・テスト
5. 再デプロイ

## 📊 品質ゲート

### タスク完了時の必須ワークフロー ⚠️ CRITICAL
1. **進捗管理表の更新（`[x]` マーク完了）**
2. **Gitコミット実行**
3. **GitHubへプッシュ**
4. **プルリクエスト作成**

### マージ前必須チェック
- [ ] **進捗管理表の更新（`[x]` マーク完了）**
- [ ] **Git コミット・プッシュ完了**
- [ ] TypeScriptエラーゼロ
- [ ] ESLintエラーゼロ
- [ ] 単体テスト通過
- [ ] セキュリティスキャン通過
- [ ] パフォーマンステスト通過

### 自動化されたチェック
- GitHub Actions CI/CD
- 依存関係脆弱性スキャン
- コードカバレッジ測定
- Lighthouse パフォーマンス測定

## 🎯 意思決定フレームワーク

### 技術選択時の判断基準
1. **プロジェクト要件適合性** - 機能要件、非機能要件
2. **学習コスト** - チームのスキルレベル
3. **保守性** - 長期的なメンテナンス
4. **コミュニティサポート** - ドキュメント、更新頻度
5. **パフォーマンス影響** - 速度、リソース使用量

### 優先順位決定マトリクス
```
高影響 & 低工数 → 最優先
高影響 & 高工数 → 計画的実装
低影響 & 低工数 → 余裕があれば
低影響 & 高工数 → 後回し
```
